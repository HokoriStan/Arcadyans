<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_enable(false);
instance_create(0,0,Game);
instance_create(0,0,Menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///END GAME
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (instance_create(0,0,obj_upDownMessage))
{
    text = "You have destroyed#the game!";
}
audio_play_sound(snd_failed, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Not enough taps left
if (Game.notEnoughTaps)
{
    with (instance_create(0,0,obj_upDownMessage))
    {
        text = "You're out of taps!";
    }
}
else if (Game.notEnoughTime)
{
    with (instance_create(0,0,obj_upDownMessage))
    {
        text = "You're out of time!";
    }
}
audio_play_sound(snd_failed, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LevelCompleted
randomize();
with (instance_create(0,0,obj_upDownMessage))
{
    switch (obj_tapsLeft.image_index)
    {
        case 0:
            var rnd = irandom(6);
            switch (rnd)
            {
                case 0: text = "Amazing!";      break;
                case 1: text = "Fabulous!";     break;
                case 2: text = "Perfect!";      break;
                case 3: text = "Wonderful!";    break;
                case 4: text = "Fantastic!";    break;
                case 5: text = "Incredible!";   break;
                case 6: text = "Flawless!";     break;
                case 7: text = "Genious";       break;
            }
            break;
        case 1:
            var rnd = irandom(4);
            switch (rnd)
            {
                case 0: text = "Great!";        break;
                case 1: text = "Good job!";     break;
                case 2: text = "Way to go!";    break;
                case 3: text = "Awesome!";      break;
                case 4: text = "Nice!";         break;
                case 5: text = "Well played!"   break;
            }
            break;
        case 2:
            var rnd = irandom(3);
            switch (rnd)
            {
                case 0: text = "Not bad!";          break;
                case 1: text = "Alright!";          break;
                case 2: text = "You did it!";       break;
                case 3: text = "Pretty nice!";      break;
                case 4: text = "Could be worse!";   break;
            }
            break;
    }
}
audio_play_sound(snd_levelCleared, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_backspace))
{
    audio_play_sound(snd_buttonPressed, 0, false);
    if (room == rm_game)
    {
        RoomGoTo(rm_levelSelection);
    }
    else if (room == rm_menu)
    {
        game_end();
    }
    else if (room == rm_levelSelection)
    {
        RoomGoTo(rm_menu);
    }
}
else if (keyboard_check_pressed(ord("R")))
{
    if (room == rm_game)
    {
        if (!instance_exists(obj_levelStartBar) &amp;&amp; !instance_exists(obj_upDownMessage))
        {
            if (alarm[0] &lt;= 0 &amp;&amp; alarm[1] &lt;= 0)
            {
                LoadLevel(Game.currentLevel);
            }
        }
    }
}
else if (keyboard_check_pressed(ord("E")) &amp;&amp; debug_mode)
{
    Game.devModeOn = !Game.devModeOn;
    if (Game.devModeOn) {show_message("Developers mode has been turned on");}
    else                {show_message("Developers mode has been turned off");}
}
else if (room == rm_game)
{
    if (keyboard_check_pressed(ord("M")) &amp;&amp; debug_mode)
    {
        Game.currentHorizontalTiles = get_integer("HorizontalTiles?",Game.currentHorizontalTiles);
        Game.currentVerticalTiles = get_integer("VerticalTiles?",Game.currentVerticalTiles);
        CreateTiles();
    }
    else if (keyboard_check_pressed(vk_enter) &amp;&amp; Game.devModeOn)
    {
        var str = "";
        var tab = "    ";
        var tilesToTurn = 0;
        var bombs = 0;
        var invisibleBombs = 0;
        str += tab+tab+tab+"horizontalTiles = "+string(Game.currentHorizontalTiles)+";"+chr(10);
        str += tab+tab+tab+"verticalTiles = "+string(Game.currentVerticalTiles)+";"+chr(10);
        for (var i=0;i&lt;Game.currentHorizontalTiles;i++)
        {
            for (var q=0;q&lt;Game.currentVerticalTiles;q++)
            {
                if (Game.board[i,q].colorIndex != 0)
                {
                    str += tab+tab+tab+"tilesToTurn["+string(tilesToTurn)+"] = "+string(q)+"."+string(i)+";"+chr(10);
                    tilesToTurn ++;
                }
            }
        }
        for (var i=0;i&lt;Game.currentHorizontalTiles;i++)
        {
            for (var q=0;q&lt;Game.currentVerticalTiles;q++)
            {
                if (Game.board[i,q].isBomb &amp;&amp; !Game.board[i,q].isInvisibleBomb)
                {
                    str += tab+tab+tab+"bombs["+string(bombs)+"] = "+string(q)+"."+string(i)+";"+chr(10);
                    bombs ++;
                }
            }
        }
        for (var i=0;i&lt;Game.currentHorizontalTiles;i++)
        {
            for (var q=0;q&lt;Game.currentVerticalTiles;q++)
            {
                if (Game.board[i,q].isInvisibleBomb)
                {
                    str += tab+tab+tab+"invisibleBombs["+string(bombs)+"] = "+string(q)+"."+string(i)+";"+chr(10);
                    invisibleBombs ++;
                }
            }
        }
        clipboard_set_text(str);
        show_message("LevelInfoCopied");
    }
    else if (Game.devModeOn || debug_mode)
    {
        if (keyboard_check_pressed(vk_space))
        {
            var levelsToComplete = 1;
            if (keyboard_check(vk_shift))
            {
                levelsToComplete = get_integer("LevelsToComplete",5);
            }
            for (var i=0;i&lt;levelsToComplete;i++)
            {
                Game.levelCompleted = true;
                Save();
                Game.currentLevel++;
            }
            alarm[0] = room_speed/2;
        }
        if (keyboard_check_pressed(ord("S")))
        {
            var list = Game.solutionLists[Game.currentLevel];
            if (ds_list_size(list) &gt; 0)
            {
                var arrayIndex = ds_list_find_value(list,Game.solutionIndex);
                Game.solutionIndex++;
                if (Game.solutionIndex &gt;= ds_list_size(list))
                {
                    Game.solutionIndex = 0;
                }
                var X = arrayIndex % Game.currentHorizontalTiles;
                var Y = floor(arrayIndex / Game.currentVerticalTiles);
                TurnTiles(Game.board[X,Y]);
            }
            else
            {
                show_message("No solution found yet.");
            }
        }
    }
}
if (room == rm_game &amp;&amp; !Game.devModeOn &amp;&amp; !Game.loadLevel)
{
    if (alarm[0] &lt;= 0 &amp;&amp; alarm[1] &lt;= 0)
    {
        var levelCompleted = true;
        for (var i=0;i&lt;instance_number(obj_tile);i++)
        {
            var inst = instance_find(obj_tile,i);
            if (inst.turn == 0)
            {
                if (inst.colorIndex != 0)
                {
                    levelCompleted = false;
                }
            }
            else
            {
                exit;
            }
        }
        if ( ((levelCompleted) || keyboard_check_pressed(vk_space)) &amp;&amp; !Game.levelCompleted &amp;&amp; !instance_exists(obj_gestureTouch))
        {
            Game.levelCompleted = true;
            alarm[0] = room_speed/2;
            Save(true);
        }
        else if (!Game.levelCompleted &amp;&amp; !instance_exists(obj_upDownMessage) &amp;&amp; !instance_exists(obj_levelStartBar))
        {
            if (Game.gameMode == Game.gameModeAgainstTime)
            {
                obj_tapsLeft.time -= 1/room_speed;
            }
            else
            {
                with (obj_tapsLeft)
                {
                    if (tapsLeft == 0 &amp;&amp; !instance_exists(obj_brokenCoin))
                    {
                        CrackCoin();
                        if (image_index &gt; image_number - 1)
                        {
                            image_index--;
                            if (!Game.notEnoughTaps)
                            {
                                Game.notEnoughTaps = true;
                                other.alarm[1] = room_speed/2;
                            }
                        }
                        else
                        {
                            tapsLeft = 5;
                        }
                    }
                }
            }
        }
    }
}
//else if (room == rm_menu)
{
    for (var i=0;i&lt;instance_number(obj_turnable);i++)
    {
        var inst = instance_find(obj_turnable,i);
        if (inst.turn != 0)
        {
            exit;
        }
    }
    if (Game.gotoRoom != -1)
    {
        var rm = Game.gotoRoom;
        Game.gotoRoom = -1;
        if (rm == rm_game)
        {
            LoadLevel(Game.currentLevel);
        }
        room_goto(rm);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Game.endLevel = false;
Game.loadLevel = false;
Game.gotoRoom = -1;
Game.levelCompleted = false;
ResetTurnWaitTime();
if (room == rm_game)
{
    LoadLevel(Game.currentLevel);
    obj_tapsLeft.time = Game.goldCoin;
    alarm[0] = -1;
    alarm[1] = -1;
}
if (room == rm_endGame)
{
    alarm[3] = room_speed/4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
