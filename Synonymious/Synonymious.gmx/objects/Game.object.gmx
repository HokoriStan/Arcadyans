<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>random_set_seed(0);
application_surface_enable(false);
device_mouse_dbclick_enable(false);

language = "English";

removeLetterFadeTextOffset = 0;
removeLetterFadeText = "+1";
removeLetterFadeTextColor = c_red;

hintFadeTextOffset = 0;
hintFadeText = "+1";
hintFadeTextColor = c_red;

flashRemoveLetterCount = 0;
flashHintCount = 0;

x = 0;
y = 0;

debug = false;
debugClick = 0;

levelSolvedPosition = 0;
levelSolvedText = "Well done!";

level = 0;
levelSolved = false;
levelSelectionPage = 0;

dataMap = ds_map_create();
TryLoadDataMap();

hintIndexes = ds_list_create();

LoadSynonymMap("EnglishSynonymList");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Background Bubbles
//if room = rm_game
    {
    for (var i=0;i&lt;6;i++)
        {
        instance_create(random_range(-512,1280),random_range(-512,1812),obj_circle);
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///swipe code

tapPos = 0;
drag = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hintFadeTextOffset += 100/room_speed;
removeLetterFadeTextOffset += 100/room_speed;

if (flashHintCount &gt; 0)
{
    flashHintCount -= 6/room_speed;
    if (flashHintCount &lt; 0)
    {
        flashHintCount = 0;
    }
}
if (flashRemoveLetterCount &gt; 0)
{
    flashRemoveLetterCount -= 6/room_speed;
    if (flashRemoveLetterCount &lt; 0)
    {
        flashRemoveLetterCount = 0;
    }
}

if (keyboard_check_pressed(vk_space))
{
    with (instance_create(0,0,obj_surfaceCopy))
    {
        dir = 1;
        event_perform(ev_step,0);
    }
}
if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_escape))
{
    switch (room)
    {
        case rm_game:
            //if (show_question("Are you sure you would like to go back to the main menu?"))
            {
                room_goto(rm_levelSelect);
            }
        break;
        case rm_menu:
            if (show_question("Are you sure you would like to quit?"))
            {
                game_end();
            }
        break;
        case rm_levelSelect:
            room_goto(rm_menu);
        break;
    }
}

if (!debug)
{
    if (mouse_check_button_pressed(mb_left))
    {
        
        switch (debugClick)
        {
            case 0: 
            if (mouse_x &lt; room_width/2 &amp;&amp; mouse_y &lt; room_height/2)
            {
                debugClick++;
            }
            break;
            
            case 1:
            if (mouse_x &gt; room_width/2 &amp;&amp; mouse_y &lt; room_height/2)
            {
                debugClick++;
            }
            else if (mouse_x &lt; room_width/2 &amp;&amp; mouse_y &lt; room_height/2)
            {
                debugClick = 1;
            }
            break;
            
            case 2:
            if (mouse_x &gt; room_width/2 &amp;&amp; mouse_y &gt; room_height/2)
            {
                debugClick++;
            }
            else if (mouse_x &lt; room_width/2 &amp;&amp; mouse_y &lt; room_height/2)
            {
                debugClick = 1;
            }
            break;
            
            case 3:
            if (mouse_x &lt; room_width/2 &amp;&amp; mouse_y &gt; room_height/2)
            {
                debugClick++;
            }
            else if (mouse_x &lt; room_width/2 &amp;&amp; mouse_y &lt; room_height/2)
            {
                debugClick = 1;
            }
            break;
            
            default:
            if (mouse_x &lt; room_width/2 &amp;&amp; mouse_y &lt; room_height/2)
            {
                debugClick = 1;
            }
            else
            {
                debugClick = 0;
            }
            break;
        }
        if (debugClick == 4)
        {
            show_debug_message("Debug enabled!");
            debug = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for page/level swipe

if (mouse_check_button_pressed(mb_left))
{
    tapPos = mouse_x;
    drag = true;
}
if (mouse_check_button_released(mb_left))
{
    tapPos = mouse_x;
    drag = false;
}
if (!instance_exists(obj_surfaceCopy) &amp;&amp; drag)
{
    if (mouse_x-tapPos &gt; 100)
    {
        if (room == rm_game &amp;&amp; Game.level &gt; 0)
        {
            Swipe(-1);
            Game.level --;
            Game.levelSolved = false;
            with (obj_inputBox)
            {
                instance_destroy();
            }
            with (obj_letterBox)
            {
                instance_destroy();
            }
            CreateLevel(Game.level);
        }
        else if (room == rm_levelSelect &amp;&amp; instance_exists(obj_buttonPreviousPage))
        {
            Swipe(-1);
            Game.levelSelectionPage --;
            CreateLevelButtons(Game.levelSelectionPage);
        }
        drag = false;
    }
    else if (mouse_x-tapPos &lt; -100 &amp;&amp; drag)
    {
        if (room == rm_game)
        {
            Swipe(1);
            Game.level ++;
            Game.levelSolved = false;
            with (obj_inputBox)
            {
                instance_destroy();
            }
            with (obj_letterBox)
            {
                instance_destroy();
            }
            CreateLevel(Game.level);
        }
        else if (room == rm_levelSelect &amp;&amp; instance_exists(obj_buttonNextPage))
        {
            Swipe(1);
            Game.levelSelectionPage ++;
            CreateLevelButtons(Game.levelSelectionPage);
        }
        drag = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drag = false;
if (room == rm_game)
{
    CreateLevel(level);
}
if (room == rm_levelSelect)
{
    CreateLevelButtons(levelSelectionPage);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_game)
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    
    draw_set_font(fnt_boxText);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(x+20,y+50,"Level "+string(Game.level+1));
    
    draw_sprite(spr_iconHint,0,x+room_width-85,y+50);
    
    var hintText = string(Game.hintAmount);
    if (Game.hintAmount &lt; 9) {hintText = "0"+hintText;}
    if (floor(flashHintCount mod 2) == 1) {draw_set_color(c_red);}
    draw_text(x+room_width-85,y+50,hintText);
    if (hintFadeTextOffset &lt; 50)
    {
        draw_set_color(hintFadeTextColor);
        draw_set_alpha(1-1/50*hintFadeTextOffset);
        draw_set_halign(fa_right);
        draw_text(x+room_width-5,y+50+hintFadeTextOffset,hintFadeText);
        draw_set_color(c_white);
    }
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_sprite(spr_iconLetter,0,x+room_width-230,y+50);
    draw_set_halign(fa_left);
    var removeLetterText = string(Game.removeLetterAmount);
    if (Game.removeLetterAmount &lt; 9) {removeLetterText = "0"+removeLetterText;}
    if (floor(flashRemoveLetterCount mod 2) == 1) {draw_set_color(c_red);}
    draw_text(x+room_width-230,y+50,removeLetterText);
    if (removeLetterFadeTextOffset &lt; 50)
    {
        draw_set_color(removeLetterFadeTextColor);
        draw_set_alpha(1-1/50*removeLetterFadeTextOffset);
        draw_set_halign(fa_right);
        draw_text(x+room_width-150,y+50+removeLetterFadeTextOffset,removeLetterFadeText);
        draw_set_color(c_white);
    }
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    
    draw_set_font(fnt_synonymFor);
    
    var text;
    switch (Game.language)
    {
        case "English": text = "Synonym for:";      break;
        case "Dutch":   text = "Synoniem voor:";    break;
        case "French":  text = "Synonyme de:";      break;
    }
    
    draw_set_color(c_black);
    draw_set_alpha(0.25);
    draw_text(x+room_width/2,y+room_height*0.15+5,text);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(x+room_width/2,y+room_height*0.15,text);
    
    
    draw_set_font(fnt_questionText);
    
    draw_set_color(c_black);
    draw_set_alpha(0.25);
    draw_text(x+room_width/2,y+room_height*0.25+8,question);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(x+room_width/2,y+room_height*0.25,question);
    
    if (debug)
    {
        draw_set_halign(fa_right);
        draw_text_transformed(x+room_width,y+room_height-20,answer,0.2,0.2,0);
    }
    
    //4144959
}
else if (room == rm_menu)
{
    draw_set_font(fnt_title);
    
    draw_set_color(c_black);
    draw_set_alpha(0.25);
    draw_text_transformed(room_width/2,room_height*0.15+8,"Synonymious",1,1,10);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text_transformed_colour(room_width/2,room_height*0.15,"Synonymious",1,1,10,c_white,15790320,c_white,15132390,1); 
}
else if (room == rm_levelSelect)
{
    draw_set_font(fnt_title);
    
    var text;
    switch (Game.language)
    {
        case "English": text = "Level selection";       break;
        case "Dutch":   text = "Level selectie";        break;
        case "French":  text = "Sélection de niveau";   break;
    }
    
    draw_set_color(c_black);
    draw_set_alpha(0.25);
    draw_text_transformed(room_width/2,room_height*0.1+8,text,0.8,0.8,10);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text_transformed_colour(room_width/2,room_height*0.1,text,0.8,0.8,10,c_white,15790320,c_white,15132390,1); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
