<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = 10;
targetSize = 1.5;
sizeDecreaseSpeed = (size-targetSize)*1.5;

alpha = 0;
targetAlpha = 1;
alphaIncreaseSpeed = 1*1.5;

shadowSize = targetSize;
targetShadowSize = 1.6;
shadowSizeIncreaseSpeed = 0.1*2;

shadowAlpha = 0.4;
targetShadowAlpha = 0;
shadowAlphaDecreaseSpeed = 0.4*2;

nextLevel = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (size &gt; targetSize)
{
    size -= sizeDecreaseSpeed/room_speed;
    if (size &lt; targetSize)
    {
        size = targetSize;
    }
    
    alpha += alphaIncreaseSpeed/room_speed;
    if (alpha &gt; targetAlpha)
    {
        alpha = targetAlpha;
    }
}

else if (shadowSize &lt;= targetShadowSize)
{
    shadowSize += shadowSizeIncreaseSpeed/room_speed;
    if (shadowSize &gt; targetShadowSize)
    {
        shadowSize = targetShadowSize;
    }
    
    shadowAlpha -= shadowAlphaDecreaseSpeed/room_speed;
    if (shadowAlpha &lt; targetShadowAlpha)
    {
        shadowAlpha = targetShadowAlpha;
        if (nextLevel)
        {
            with (instance_create(0,0,obj_surfaceCopy))
            {
                dir = 1;
                event_perform(ev_step,0);
            }
            Game.level ++;
            Game.levelSolved = false;
            with (obj_inputBox)
            {
                instance_destroy();
            }
            with (obj_letterBox)
            {
                instance_destroy();
            }
            CreateLevel(Game.level);
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_synonymFor);
draw_set_halign(fa_center);
if (size == targetSize)
{
    draw_set_color(c_black);
    draw_set_alpha(shadowAlpha);
    draw_text_transformed(room_width/2,room_height*0.38+5,"SOLVED",shadowSize*1.25,shadowSize*1.25,0);
}

draw_set_color(7843840);
draw_set_alpha(alpha);
draw_text_transformed(room_width/2,room_height*0.38,"SOLVED",size*1.25,size*1.25,0);


/*var solvedText = "SOLVED";
var drawX = room_width/2-string_width(solvedText)/2*size;
for (var i=0;i&lt;string_length(solvedText);i++)
{
    var letter = string_copy(solvedText,1,1);
    draw_text_transformed(drawX,room_height*0.38,letter,size,size,0);
    drawX += string_width(letter)*size;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
