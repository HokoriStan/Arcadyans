<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_buttonLarge</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pressed = false;
image_speed = 0;
buttonLanguage = "";
surface0 = -1;
surface1 = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface0 != -1)
{
    if (mouse_check_button_pressed(mb_left) &amp;&amp; instance_number(obj_letterBox) &gt; array_length_1d(Game.inputBox))
    {
        if (SurfaceContainsMouse(surface0))
        {
            pressed = true;
            image_index = 1;
            y += 9;
        }
    }
    if (mouse_check_button_released(mb_left))
    {
        if (SurfaceContainsMouse(surface0))
        {
            if (pressed &amp;&amp; !Game.levelSolved &amp;&amp; instance_number(obj_letterBox) &gt; array_length_1d(Game.inputBox))
            {
                if (Game.removeLetterAmount &gt; 0)
                {
                    var list = ds_list_create();
                    for (var i=0;i&lt;instance_number(obj_letterBox);i++)
                    {
                        ds_list_add(list,instance_find(obj_letterBox,i).letter);
                    }
                    for (var i=0;i&lt;array_length_1d(Game.inputBox);i++)
                    {
                        var char = Game.inputBox[i].requiredLetter;
                        ds_list_delete(list,ds_list_find_index(list,char));
                    }
                    var char = ds_list_find_value(list,irandom(ds_list_size(list)-1));
                    ds_list_destroy(list);
                    if (is_undefined(char))
                    {
                        exit;
                    }
                    var letterBox = FindLetterBox(char);
                    with (letterBox)
                    {
                        if (id.inputBox != -1)
                        {
                            id.inputBox.letter = "";
                            id.inputBox.letterBox = -1;
                        }
                        instance_destroy();
                    }
                    if (instance_number(obj_letterBox) == array_length_1d(Game.inputBox))
                    {
                        image_alpha = 0.4;
                    }
                    Game.removeLetterAmount--;
                    ds_map_replace(Game.dataMap,"removeLetterAmount",Game.removeLetterAmount);
                    DrawFadeTextRemoveLetter(-1);
                    SaveLevel(Game.level);
                }
                else
                {
                    Game.flashRemoveLetterCount = 6;
                }
            }
        }
        
        if (pressed)
        {
            pressed = false;
            image_index = 0;
            y -= 9;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ClearButtonSurfaces();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_boxText);

if (!surface_exists(surface0) || !surface_exists(surface1) || buttonLanguage != Game.language)
{
    buttonLanguage = Game.language;
    switch (Game.language)
    {
        case "English": text = "Remove letter";     break;
        case "Dutch":   text = "Verwijder letter";  break;
        case "French":  text = "Enlever lettre";    break;
        case "Swedish":  text = "Ta bort bokstav";  break;
    }
    AssignSurfaces(text);
}

var surfaceToDraw;
if (image_index == 0)
{
    surfaceToDraw = surface0;
}
else
{
    surfaceToDraw = surface1;
}

draw_surface(surfaceToDraw,x-surface_get_width(surfaceToDraw)/2,y-surface_get_height(surfaceToDraw)/2+9);

draw_set_color(c_black);
draw_set_alpha(0.25);
draw_text(x,y+6,text);

draw_set_color(4210752);
draw_set_alpha(1);
draw_text(x,y,text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
