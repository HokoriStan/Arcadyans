<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_turnable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
colorIndex = 0;
arrayIndex = -1;

isBomb = false;
isInvisibleBomb = false;
bombAlphaDir = -1;
bombAlpha = 1;

bombX = x;
bombY = y;
explode = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (image_xscale &lt;= 0)
{
    image_blend = Game.tileColors[colorIndex];
}
if (isBomb)
{
    bombAlpha += 0.8/room_speed*bombAlphaDir;
    if (bombAlpha &lt;= 0.05)
    {
        if (!isInvisibleBomb || explode &gt; 0)
        {
            bombAlpha = 0.05;
            bombAlphaDir = 1;
        }
        else if (bombAlpha &lt; 0)
        {
            bombAlpha = 0;
        }
    }
    else if (bombAlpha &gt;= 1)
    {
        bombAlpha = 1;
        bombAlphaDir = -1;
    }
    if (explode &gt;= 0 &amp;&amp; turn == 0)
    {
        explode -= 1/room_speed;
        Game.bombExploded = true;
        if (explode &lt;= 0)
        {
            if (!Game.devModeOn)
            {
                with (obj_tile)
                {
                    speed = 5;
                    bombX = other.x+irandom_range(-20,20);
                    bombY = other.y+irandom_range(-20,20);
                    rotateSpeed = irandom_range(-5,5);
                }
                parts = 3;
                partSize = 1/parts;
                var startX = x-sprite_width/2+(sprite_width/parts)/2;
                var startY = y-sprite_height/2+(sprite_height/parts)/2;
                for (var i=0;i&lt;parts;i++)
                {
                    for (var q=0;q&lt;parts;q++)
                    {
                        var inst = instance_create(startX+i*(sprite_width/parts),startY+q*(sprite_height/parts),obj_tilePart);
                        //var inst = instance_create(startX,startY,obj_tilePart);
                        with (object_get_parent(inst))
                        {
                            instance_destroy();
                        }
                        inst.image_xscale = partSize;
                        inst.image_yscale = partSize;
                        inst.speed = 5;
                        inst.bombX = x+irandom_range(-20,20);
                        inst.bombY = y+irandom_range(-20,20);
                        inst.rotateSpeed = random_range(-20,20);
                        inst.image_blend = image_blend;
                        inst.indexX = i;
                        inst.indexY = q;
                        inst.bombAlpha = bombAlpha;
                    }
                }
                obj_controller.alarm[2] = 1*room_speed;
                audio_play_sound(snd_explosion,0,false);
                instance_destroy();
            }
        }
    }
}
MoveAwayFromBomb();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Game.devModeOn)
{
    if (!isBomb)
    {
        isBomb = true;
    }
    else if (isBomb &amp;&amp; !isInvisibleBomb)
    {
        isInvisibleBomb = true;
    }
    else
    {
        isInvisibleBomb = false;
        isBomb = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TryPressTile(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (isBomb)
{
    draw_sprite_ext(spr_bomb,1,x,y,image_xscale,image_yscale,image_angle,c_white,bombAlpha);
}
if (Game.devModeOn)
{
    if (isInvisibleBomb)
    {
        draw_text(x,y,"Invisible#bomb");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
