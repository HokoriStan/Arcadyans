<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pageIndex = -1;
pageHorizontalTiles = 4;
pageVerticalTiles = 4;
maxPageButtons = pageHorizontalTiles*pageVerticalTiles;
pages = ceil(Game.createdLevels/maxPageButtons);
turningPage = false;
pressing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_levelSelection)
{
    if (turningPage)
    {
        with (obj_buttonLevel)
        {
            if (turn != 0)
            {
                exit;
            }
        }
        CreateLevelSelectButtons();
        turningPage = false;
    }
    else
    {
        if (mouse_check_button_pressed(mb_left))
        {
            pressX = mouse_x;
            pressY = mouse_y;
            pressing = true;
        }
        if (mouse_check_button_released(mb_left))
        {
            pressing = false;
        }
        if (pressing &amp;&amp; pressX-mouse_x &gt; 50)
        {
            with (obj_turnable)
            {
                if (turn != 0)
                {
                    exit;
                }
            }
            if (Menu.pageIndex &lt; Menu.pages-1)
            {
                Menu.pageIndex++;
                ResetTurnWaitTime(true);
                with (obj_buttonLevel)
                {
                    turn = -1;
                }
                if (Menu.pageIndex == Menu.pages-1)
                {
                    obj_buttonNextPage.turn = -1;
                }
                PlayButtonSound();
                audio_play_sound(snd_tilePressed,0,false);
                Menu.turningPage = true;
                pressing = false;
            }
        }
        else if (pressing &amp;&amp; pressX-mouse_x &lt; -50)
        {
            with (obj_turnable)
            {
                if (turn != 0)
                {
                    exit;
                }
            }
            if (Menu.pageIndex &gt; 0)
            {
                Menu.pageIndex--;
                ResetTurnWaitTime(true);
                with (obj_buttonLevel)
                {
                    turn = -1;
                }
                if (Menu.pageIndex == 0)
                {
                    obj_buttonPreviousPage.turn = -1;
                }
                PlayButtonSound();
                audio_play_sound(snd_tilePressed,0,false);
                Menu.turningPage = true;
                pressing = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>Menu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_levelSelection)
{
    if (pageIndex == -1)
    {
        pageIndex = floor(Game.unlockedLevel/(Menu.pageHorizontalTiles*Menu.pageVerticalTiles));
    }
    CalculatePagesUnlocked();
    if (pageIndex &gt; Game.pagesUnlocked)
    {
        pageIndex = Game.pagesUnlocked;
    }
    CreateLevelSelectButtons();
    
    for (var i=0;i&lt;=Game.pagesUnlocked;i++)
    {
        var offset = sprite_get_width(spr_levelSelectDot)*1.5;
        var instance = instance_create(room_width/2-(Game.pagesUnlocked/2*offset)+i*offset,975,obj_levelSelectDot);
        instance.pageIndex = i;
        with (instance)
        {
            if (pageIndex == Menu.pageIndex)
            {
                image_yscale = 1.3;
                startImageXScale = 1.3;
                image_xscale = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>68,68</point>
    <point>68,68</point>
  </PhysicsShapePoints>
</object>
