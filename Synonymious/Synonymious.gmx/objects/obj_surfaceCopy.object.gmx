<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 0;
initialized = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dir != 0 &amp;&amp; !initialized)
{
    initialized = true;
    view_xview = -room_width*dir;
    x = -room_width*dir;
    y = 0;
    
    with (obj_circle)
    {
        var inst = instance_create(x,y,obj_circle);
        inst.changed = changed;
        inst.fadeout = fadeout;
        inst.imagesize = imagesize;
        inst.alpha = alpha;
        
        inst.image_alpha = image_alpha;
        inst.image_xscale = image_xscale;
        inst.image_yscale = image_yscale;
        inst.alarm[0] = 1;
        
        x -= room_width*other.dir;
        clone = true;
    }
    
    surface = surface_create(room_width,room_height);
    
    surface_set_target(surface);
    with (all)
    {
        if (id != other.id)
        {
            event_perform(ev_draw,0);
        }
    }
    surface_reset_target();

}
if (dir == 1)
{
    view_xview += 50;
    if (view_xview &gt; 0)
    {
        view_xview = 0;
        surface_free(surface);
        instance_destroy();
    }
}
else if (dir == -1)
{
    view_xview -= 50;
    if (view_xview &lt; 0)
    {
        view_xview = 0;
        surface_free(surface);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (initialized)
{
    draw_surface(surface,x,y);
}
/*with (all)
{
   
    if (id != other.id)
    {
        x -= room_width;  
        event_perform(ev_draw,0);
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
