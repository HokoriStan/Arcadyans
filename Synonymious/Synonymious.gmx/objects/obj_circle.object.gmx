<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_circle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var imagesize = random_range(0.1,0.75);
image_xscale = imagesize;
image_yscale = imagesize;
image_alpha = 0;
image_angle = random(360);
direction = image_angle;
speed = random_range(1,2);

targetAngle = image_angle;
fadeOut = false;
targetAlpha = random_range(0.25,0.5);
travelDistance = random_range(300,500);
clone = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xBorder = -sprite_width/4;
var yBorder = -sprite_height/4;
var width = room_width+sprite_width/4;
var height = room_height+sprite_height/4;

if (instance_exists(obj_surfaceCopy))
{
    xBorder -= room_width;
}

if (x &lt; xBorder || y &lt; yBorder || x &gt; width || y &gt; height)
{
    fadeOut = true;
}

travelDistance -= speed;
if (travelDistance &lt;= 0)
{
    travelDistance = random_range(300,500);
    var randomDir = 1;
    if (irandom(1) == 0)
    {
        randomDir = -1;
    }
    targetAngle += random_range(0,90) * randomDir;
}
if (image_angle != targetAngle)
{
    var dd = angle_difference(image_angle, targetAngle);
    image_angle += min(abs(dd), 0.5) * sign(dd);
}
direction = image_angle;

if (fadeOut)
{
    image_alpha -= 0.6/room_speed;
    if (image_alpha &lt;= 0)
    {
        if (!clone &amp;&amp; instance_number(obj_circle) &lt; 12)
        {
            instance_create(random_range(0,room_width),random_range(0,room_height),obj_circle);
        }
        instance_destroy();
    }
}
else if (image_alpha &lt; targetAlpha)
{
    image_alpha += 0.6/room_speed;
    if (image_alpha &gt; targetAlpha)
    {
        image_alpha = targetAlpha;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
