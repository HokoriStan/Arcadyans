<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gestureTouch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>horMoveSpeed = 5;
verMoveSpeed = 5;
with (instance_create(x,y,obj_upDownMessage))
{
    text = "Touch a tile to turn#the tiles in a + form";
    waitForTap = true;
    stopHeight = room_height*0.72
    y -= 3000;
}
image_speed = 0;
image_xscale = 1;
image_yscale = 1;
waitTimer = 1.5;

position[0] = Game.board[1,1];
position[1] = Game.board[2,2];
position[2] = Game.board[1,1];
position[2] = Game.board[0,0];

currentPos = 0;

x = position[currentPos].x;
y = position[currentPos].y;
targetX = x;
targetY = y;

destroy = false;
blurAlpha = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (destroy)
{
    blurAlpha -= 2/room_speed;
    if (blurAlpha &lt;= 0)
    {
        instance_destroy();
    }
}
else
{
    if (waitTimer &gt; 0)
    {
        waitTimer -= 1/room_speed;
        if (waitTimer &lt;= 0)
        {
            waitTimer = 0;
            image_xscale = 1;
            image_yscale = 1;
            image_index = 0;
        }
    }
    else
    {
        if (x != targetX || y != targetY)
        {
            var wait = image_xscale &lt; 1 || image_yscale &lt; 1;
            image_xscale += 0.5/room_speed;
            image_yscale += 0.5/room_speed;
            if (image_xscale &gt;= 0.9)
            {
                image_index = 0;
            }
            if (image_xscale &gt;= 1)
            {
                if (wait)
                {
                    waitTimer = 0.5;
                }
                else
                {
                    image_xscale = 1;
                    image_yscale = 1;
                    var dir = sign(targetX-x);
                    x += horMoveSpeed;
                    if (dir != sign(targetX-x))
                    {
                        x = targetX;
                    }
                    var dir = sign(targetY-y);
                    y += verMoveSpeed;
                    if (dir != sign(targetY-y))
                    {
                        y = targetY;
                    }
                }
            }
        }
        else if (image_xscale &gt; 0.8)
        {
            image_xscale -= 0.5/room_speed;
            image_yscale -= 0.5/room_speed;
            if (image_xscale &lt;= 0.9)
            {
                image_index = 1;
            }
            if (image_xscale &lt;= 0.8)
            {
                image_xscale = 0.8;
                image_yscale = 0.8;
                TurnTiles(position[currentPos]);
                currentPos++;
                if (currentPos &gt;= array_length_1d(position))
                {
                    currentPos = 0;
                }
                targetX = position[currentPos].x;
                targetY = position[currentPos].y;
                horMoveSpeed = (targetX-x)/room_speed;
                verMoveSpeed = (targetY-y)/room_speed;
            }
        }
    }
    blurAlpha += 2/room_speed;
    if (blurAlpha &gt; 0.8)
    {
        blurAlpha = 0.8;
    }
}
image_alpha = blurAlpha+0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_alpha(blurAlpha);
draw_rectangle(0,0,room_width,room_height,false);
draw_self();
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>65,25</point>
    <point>91,91</point>
  </PhysicsShapePoints>
</object>
